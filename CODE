#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#ifdef _WIN32
// Comando para limpar tela no Windows
const string limparTelaCmd = "cls";
// Códigos ANSI para cores no Windows
const string corVermelha = "";
const string corVerde = "";
const string corRosa = "";
const string corAzul = "";
#else
// Comando para limpar tela em sistemas Unix (Linux, macOS)
const string limparTelaCmd = "clear";
// Códigos ANSI para cores em sistemas Unix
const string corVermelha = "\033[1;31m";
const string corVerde = "\033[1;32m";
const string corRosa = "\033[1;35m";
const string corAzul = "\033[1;34m";
#endif

struct Jogo {
  int id_jogo;
  string nome;
  double preco;
};

struct Usuario {
  string nome;
  string senha;
  vector<Jogo> jogosComprados;
  double saldo;
};

class BibliotecaJogos {
private:
  vector<Jogo> jogosDisponiveis;
  vector<Usuario> usuarios; // Correção: Declarar vetor de usuarios

  const string arquivoUsuarios = "usuarios.txt";

public:
  Usuario usuarioLogado;

  BibliotecaJogos() {
    jogosDisponiveis.push_back({1, "The Witcher 3", 199.99});
    jogosDisponiveis.push_back({2, "Cyberpunk 2077", 207.70});
    jogosDisponiveis.push_back({3, "Assassin's Creed Valhalla", 299.99});
  }
  void mensagemColorida(const string &mensagem, const string &cor) const {
    cout << cor << mensagem << "\033[0m" << endl;
  }

  void listarJogosDisponiveis() const {
    mensagemColorida("\n\n❑ Jogos Disponíveis ❑\n", corVerde);
    for (const auto &jogo : jogosDisponiveis) {
      cout << " " << jogo.id_jogo << " - " << jogo.nome << " (R$" << jogo.preco
           << ")" << endl;
    }
  }

  void fazerLogin(const string &usuario, const string &senha) {
    for (auto &u : usuarios) {
      if (u.nome == usuario && u.senha == senha) {
        usuarioLogado = u;
        mensagemColorida("Bem-vindo, " + u.nome + "!", corVerde);
        return;
      }
    }
    mensagemColorida("Usuário ou senha incorretos.", corVermelha);
  }

  void cadastrarUsuario(const string &usuario, const string &senha) {
    Usuario novoUsuario = {usuario, senha, {}, 0.0};
    usuarios.push_back(novoUsuario);
    mensagemColorida("Usuário cadastrado com sucesso.", corVerde);
  }

  void comprarJogo(const int &idjogo) {
    for (const auto &jogo : jogosDisponiveis) {
      if (jogo.id_jogo == idjogo) {
        if (usuarioLogado.saldo >= jogo.preco) {
          usuarioLogado.jogosComprados.push_back(jogo);
          usuarioLogado.saldo -= jogo.preco;
          mensagemColorida(corVerde + "Compra realizada com sucesso!\n" +
                               corAzul + "⇩" + jogo.nome +
                               " adicionado à sua biblioteca⇩" + corAzul,
                           corVerde);
        } else {
          mensagemColorida("Saldo insuficiente para comprar " + jogo.nome + ".",
                           corVermelha);
        }
        return;
      }
    }
    mensagemColorida("Jogo não encontrado.", corVermelha);
  }

  void listarJogosComprados() const {
    mensagemColorida("Jogos Comprados por " + usuarioLogado.nome + ":",
                     corVerde);
    for (const auto &jogo : usuarioLogado.jogosComprados) {
      cout << " " << jogo.id_jogo << " - " << jogo.nome << " (R$" << jogo.preco
           << ")" << endl;
    }
  }

  void carregarUsuarios() {
    ifstream arquivo(arquivoUsuarios);

    if (!arquivo.is_open()) {
      // Se o arquivo não existir, não há usuários para carregar
      return;
    }

    usuarios.clear();

    string linha;
    while (getline(arquivo, linha)) {
      stringstream ss(linha);
      string nome, senha;
      double saldo;

      ss >> nome >> senha >> saldo;

      Usuario novoUsuario = {nome, senha, {}, saldo};
      usuarios.push_back(novoUsuario);
    }

    arquivo.close();
  }

  void salvarUsuarios() const {
    ofstream arquivo(arquivoUsuarios);

    for (const auto &u : usuarios) {
      arquivo << u.nome << " " << u.senha << " " << u.saldo << endl;
    }

    arquivo.close();
  }

  void depositarSaldo(double valor) {
    if (valor > 0) {
      usuarioLogado.saldo += valor;
      mensagemColorida("Depósito de R$" + to_string(valor) +
                           " realizado com sucesso. Novo saldo: R$" +
                           to_string(usuarioLogado.saldo),
                       corVerde);
    } else {
      mensagemColorida("Valor de depósito inválido.", corVermelha);
    }
  }
  ~BibliotecaJogos() { salvarUsuarios(); }
};

void imprimirMoldura(int largura) {
  for (int i = 0; i < largura; ++i) {
    cout << "\033[1;33m▉\033[0m";
  }
  cout << endl;
}

void menuComprarJogo(BibliotecaJogos &biblioteca, string &usuario) {
  while (true) {
    cout << "\n";
    imprimirMoldura(50);

    cout << "\033[1;33m▉\033[0m\033[1;36m ▰▰▰▰▰▰▰▰▰▰▰▰ Menu de Compras "
            "▰▰▰▰▰▰▰▰▰▰▰▰▰\t\t\033[0m\033[1;33m▉\033[0m\n"
         << "\033[1;33m▉\033[0m\033[1;33m 1.\033[0m Comprar "
            "Jogo\033[1;33m\t\t\t\t\t\t\t\t ▉\033[0m\n"
         << "\033[1;33m▉\033[0m\033[1;33m 2.\033[0m Lista Jogos "
            "Comprados\033[1;33m\t\t\t\t\t\t ▉\033[0m\n"
         << "\033[1;33m▉\033[0m\033[1;33m 3.\033[0m Adicionar "
            "Créditos\033[1;33m\t\t\t\t\t\t ▉\033[0m\n"
         << "\033[1;33m▉\033[0m\033[1;33m 4.\033[0m Voltar ao Menu "
            "Principal\033[1;33m\t\t\t\t\t ▉\033[0m\n";

    imprimirMoldura(50);

    int opcao;
    cout << "\n\033[1;37mEscolha uma opção: \033[0m";
    cin >> opcao;

    switch (opcao) {
    case 1: {
      int idjogo;
      cout << "Digite o código do jogo que deseja comprar: ";
      cin >> idjogo;
      biblioteca.comprarJogo(idjogo);
      break;
    }
    case 2: {
      biblioteca.listarJogosComprados();
      break;
    }
    case 3: {
      double valorDeposito;
      cout << "Digite o valor que deseja depositar: R$";
      cin >> valorDeposito;
      biblioteca.depositarSaldo(valorDeposito);
      break;
    }
    case 4: {
      return;
    }
    default:
      biblioteca.mensagemColorida("Opção inválida. Tente novamente.",
                                  corVermelha);
    }
  }
}

int MenuLogin() {
  BibliotecaJogos biblioteca;

  string usuario, senha;

  while (true) {
    cout << "\n";
    imprimirMoldura(50);

    cout << "\033[1;33m▉\033[0m\033[1;36m ▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰ Menu Principal "
            "▰▰▰▰▰▰▰▰▰▰▰▰▰▰ \033[0m\033[1;33m▉\033[0m\n"
         << "\033[1;33m▉\033[0m\033[1;33m 1.\033[0m Listar "
            "Jogos\033[1;33m\t\t\t\t\t\t\t\t ▉\033[0m\n"
         << "\033[1;33m▉\033[0m\033[1;33m 2.\033[0m Fazer "
            "Login\033[1;33m\t\t\t\t\t\t\t\t ▉\033[0m\n"
         << "\033[1;33m▉\033[0m\033[1;33m 3.\033[0m Criar "
            "Conta\033[1;33m\t\t\t\t\t\t\t\t ▉\033[0m\n"
         << "\033[1;33m▉\033[0m\033[1;33m 4.\033[0m "
            "Sair\033[1;33m\t\t\t\t\t\t\t\t\t\t ▉\033[0m\n";

    imprimirMoldura(50);

    int opcao;
    cout << "\n\033[1;37mEscolha uma opção: \033[0m";
    cin >> opcao;

    switch (opcao) {
    case 1: {
      biblioteca.listarJogosDisponiveis();
      break;
    }
    case 2: {
      usuario = "";
      senha = "";
      cout << "Digite seu usuário: ";
      cin >> usuario;
      cout << "Digite sua senha: ";
      cin >> senha;
      biblioteca.fazerLogin(usuario, senha);
      break;
    }
    case 3: {
      usuario = "";
      senha = "";
      cout << "Digite o novo usuário: ";
      cin >> usuario;
      cout << "Digite a nova senha: ";
      cin >> senha;
      biblioteca.cadastrarUsuario(usuario, senha);
      break;
    }
    case 4: {
      cout << "Saindo. Até mais!" << endl;
      return 0;
    }
    default:
      biblioteca.mensagemColorida("Opção inválida. Tente novamente.",
                                  corVermelha);
    }

    if (biblioteca.usuarioLogado.nome != "") {
      menuComprarJogo(biblioteca, usuario);
    }
  }
}

int main() {
  BibliotecaJogos biblioteca;
  biblioteca.carregarUsuarios();
  MenuLogin();
}
-->
